// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssl_simulation_config.proto

package sim

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Movement limits for a robot
type RobotLimits struct {
	// Max absolute speed-up acceleration [m/s^2]
	AccSpeedupAbsoluteMax *float32 `protobuf:"fixed32,1,opt,name=acc_speedup_absolute_max,json=accSpeedupAbsoluteMax" json:"acc_speedup_absolute_max,omitempty"`
	// Max angular speed-up acceleration [rad/s^2]
	AccSpeedupAngularMax *float32 `protobuf:"fixed32,2,opt,name=acc_speedup_angular_max,json=accSpeedupAngularMax" json:"acc_speedup_angular_max,omitempty"`
	// Max absolute brake acceleration [m/s^2]
	AccBrakeAbsoluteMax *float32 `protobuf:"fixed32,3,opt,name=acc_brake_absolute_max,json=accBrakeAbsoluteMax" json:"acc_brake_absolute_max,omitempty"`
	// Max angular brake acceleration [rad/s^2]
	AccBrakeAngularMax *float32 `protobuf:"fixed32,4,opt,name=acc_brake_angular_max,json=accBrakeAngularMax" json:"acc_brake_angular_max,omitempty"`
	// Max absolute velocity [m/s]
	VelAbsoluteMax *float32 `protobuf:"fixed32,5,opt,name=vel_absolute_max,json=velAbsoluteMax" json:"vel_absolute_max,omitempty"`
	// Max angular velocity [rad/s]
	VelAngularMax        *float32 `protobuf:"fixed32,6,opt,name=vel_angular_max,json=velAngularMax" json:"vel_angular_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotLimits) Reset()         { *m = RobotLimits{} }
func (m *RobotLimits) String() string { return proto.CompactTextString(m) }
func (*RobotLimits) ProtoMessage()    {}
func (*RobotLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f358f49a01177a5, []int{0}
}

func (m *RobotLimits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RobotLimits.Unmarshal(m, b)
}
func (m *RobotLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RobotLimits.Marshal(b, m, deterministic)
}
func (m *RobotLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotLimits.Merge(m, src)
}
func (m *RobotLimits) XXX_Size() int {
	return xxx_messageInfo_RobotLimits.Size(m)
}
func (m *RobotLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotLimits.DiscardUnknown(m)
}

var xxx_messageInfo_RobotLimits proto.InternalMessageInfo

func (m *RobotLimits) GetAccSpeedupAbsoluteMax() float32 {
	if m != nil && m.AccSpeedupAbsoluteMax != nil {
		return *m.AccSpeedupAbsoluteMax
	}
	return 0
}

func (m *RobotLimits) GetAccSpeedupAngularMax() float32 {
	if m != nil && m.AccSpeedupAngularMax != nil {
		return *m.AccSpeedupAngularMax
	}
	return 0
}

func (m *RobotLimits) GetAccBrakeAbsoluteMax() float32 {
	if m != nil && m.AccBrakeAbsoluteMax != nil {
		return *m.AccBrakeAbsoluteMax
	}
	return 0
}

func (m *RobotLimits) GetAccBrakeAngularMax() float32 {
	if m != nil && m.AccBrakeAngularMax != nil {
		return *m.AccBrakeAngularMax
	}
	return 0
}

func (m *RobotLimits) GetVelAbsoluteMax() float32 {
	if m != nil && m.VelAbsoluteMax != nil {
		return *m.VelAbsoluteMax
	}
	return 0
}

func (m *RobotLimits) GetVelAngularMax() float32 {
	if m != nil && m.VelAngularMax != nil {
		return *m.VelAngularMax
	}
	return 0
}

// Robot wheel angle configuration
// all angles are relative to looking forward,
// all wheels / angles are clockwise
type RobotWheelAngles struct {
	// Angle front right [rad]
	FrontRight *float32 `protobuf:"fixed32,1,req,name=front_right,json=frontRight" json:"front_right,omitempty"`
	// Angle back right [rad]
	BackRight *float32 `protobuf:"fixed32,2,req,name=back_right,json=backRight" json:"back_right,omitempty"`
	// Angle back left [rad]
	BackLeft *float32 `protobuf:"fixed32,3,req,name=back_left,json=backLeft" json:"back_left,omitempty"`
	// Angle front left [rad]
	FrontLeft            *float32 `protobuf:"fixed32,4,req,name=front_left,json=frontLeft" json:"front_left,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotWheelAngles) Reset()         { *m = RobotWheelAngles{} }
func (m *RobotWheelAngles) String() string { return proto.CompactTextString(m) }
func (*RobotWheelAngles) ProtoMessage()    {}
func (*RobotWheelAngles) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f358f49a01177a5, []int{1}
}

func (m *RobotWheelAngles) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RobotWheelAngles.Unmarshal(m, b)
}
func (m *RobotWheelAngles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RobotWheelAngles.Marshal(b, m, deterministic)
}
func (m *RobotWheelAngles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotWheelAngles.Merge(m, src)
}
func (m *RobotWheelAngles) XXX_Size() int {
	return xxx_messageInfo_RobotWheelAngles.Size(m)
}
func (m *RobotWheelAngles) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotWheelAngles.DiscardUnknown(m)
}

var xxx_messageInfo_RobotWheelAngles proto.InternalMessageInfo

func (m *RobotWheelAngles) GetFrontRight() float32 {
	if m != nil && m.FrontRight != nil {
		return *m.FrontRight
	}
	return 0
}

func (m *RobotWheelAngles) GetBackRight() float32 {
	if m != nil && m.BackRight != nil {
		return *m.BackRight
	}
	return 0
}

func (m *RobotWheelAngles) GetBackLeft() float32 {
	if m != nil && m.BackLeft != nil {
		return *m.BackLeft
	}
	return 0
}

func (m *RobotWheelAngles) GetFrontLeft() float32 {
	if m != nil && m.FrontLeft != nil {
		return *m.FrontLeft
	}
	return 0
}

// Specs of a robot
type RobotSpecs struct {
	// Id of the robot
	Id *RobotId `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Robot radius [m]
	Radius *float32 `protobuf:"fixed32,2,opt,name=radius,def=0.09" json:"radius,omitempty"`
	// Robot height [m]
	Height *float32 `protobuf:"fixed32,3,opt,name=height,def=0.15" json:"height,omitempty"`
	// Robot mass [kg]
	Mass *float32 `protobuf:"fixed32,4,opt,name=mass" json:"mass,omitempty"`
	// Max linear kick speed [m/s] (unset = unlimited)
	MaxLinearKickSpeed *float32 `protobuf:"fixed32,7,opt,name=max_linear_kick_speed,json=maxLinearKickSpeed" json:"max_linear_kick_speed,omitempty"`
	// Max chip kick speed [m/s] (unset = unlimited)
	MaxChipKickSpeed *float32 `protobuf:"fixed32,8,opt,name=max_chip_kick_speed,json=maxChipKickSpeed" json:"max_chip_kick_speed,omitempty"`
	// Width of the dribbler [m] (implicitly defines the distance from robot center to dribbler and opening angle)
	DribblerWidth *float32 `protobuf:"fixed32,9,opt,name=dribbler_width,json=dribblerWidth" json:"dribbler_width,omitempty"`
	// Movement limits
	Limits *RobotLimits `protobuf:"bytes,10,opt,name=limits" json:"limits,omitempty"`
	// Wheel angle configuration
	WheelAngles *RobotWheelAngles `protobuf:"bytes,13,opt,name=wheel_angles,json=wheelAngles" json:"wheel_angles,omitempty"`
	// Custom robot spec for specific simulators (the protobuf files are managed by the simulators)
	Custom               *any.Any `protobuf:"bytes,14,opt,name=custom" json:"custom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotSpecs) Reset()         { *m = RobotSpecs{} }
func (m *RobotSpecs) String() string { return proto.CompactTextString(m) }
func (*RobotSpecs) ProtoMessage()    {}
func (*RobotSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f358f49a01177a5, []int{2}
}

func (m *RobotSpecs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RobotSpecs.Unmarshal(m, b)
}
func (m *RobotSpecs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RobotSpecs.Marshal(b, m, deterministic)
}
func (m *RobotSpecs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotSpecs.Merge(m, src)
}
func (m *RobotSpecs) XXX_Size() int {
	return xxx_messageInfo_RobotSpecs.Size(m)
}
func (m *RobotSpecs) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotSpecs.DiscardUnknown(m)
}

var xxx_messageInfo_RobotSpecs proto.InternalMessageInfo

const Default_RobotSpecs_Radius float32 = 0.09
const Default_RobotSpecs_Height float32 = 0.15

func (m *RobotSpecs) GetId() *RobotId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RobotSpecs) GetRadius() float32 {
	if m != nil && m.Radius != nil {
		return *m.Radius
	}
	return Default_RobotSpecs_Radius
}

func (m *RobotSpecs) GetHeight() float32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return Default_RobotSpecs_Height
}

func (m *RobotSpecs) GetMass() float32 {
	if m != nil && m.Mass != nil {
		return *m.Mass
	}
	return 0
}

func (m *RobotSpecs) GetMaxLinearKickSpeed() float32 {
	if m != nil && m.MaxLinearKickSpeed != nil {
		return *m.MaxLinearKickSpeed
	}
	return 0
}

func (m *RobotSpecs) GetMaxChipKickSpeed() float32 {
	if m != nil && m.MaxChipKickSpeed != nil {
		return *m.MaxChipKickSpeed
	}
	return 0
}

func (m *RobotSpecs) GetDribblerWidth() float32 {
	if m != nil && m.DribblerWidth != nil {
		return *m.DribblerWidth
	}
	return 0
}

func (m *RobotSpecs) GetLimits() *RobotLimits {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *RobotSpecs) GetWheelAngles() *RobotWheelAngles {
	if m != nil {
		return m.WheelAngles
	}
	return nil
}

func (m *RobotSpecs) GetCustom() *any.Any {
	if m != nil {
		return m.Custom
	}
	return nil
}

type RealismConfig struct {
	// Custom config for specific simulators (the protobuf files are managed by the simulators)
	Custom               *any.Any `protobuf:"bytes,1,opt,name=custom" json:"custom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RealismConfig) Reset()         { *m = RealismConfig{} }
func (m *RealismConfig) String() string { return proto.CompactTextString(m) }
func (*RealismConfig) ProtoMessage()    {}
func (*RealismConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f358f49a01177a5, []int{3}
}

func (m *RealismConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RealismConfig.Unmarshal(m, b)
}
func (m *RealismConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RealismConfig.Marshal(b, m, deterministic)
}
func (m *RealismConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealismConfig.Merge(m, src)
}
func (m *RealismConfig) XXX_Size() int {
	return xxx_messageInfo_RealismConfig.Size(m)
}
func (m *RealismConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RealismConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RealismConfig proto.InternalMessageInfo

func (m *RealismConfig) GetCustom() *any.Any {
	if m != nil {
		return m.Custom
	}
	return nil
}

// Change the simulator configuration
type SimulatorConfig struct {
	// Update the geometry
	Geometry *SSL_GeometryData `protobuf:"bytes,1,opt,name=geometry" json:"geometry,omitempty"`
	// Update the robot specs
	RobotSpecs []*RobotSpecs `protobuf:"bytes,2,rep,name=robot_specs,json=robotSpecs" json:"robot_specs,omitempty"`
	// Update realism configuration
	RealismConfig *RealismConfig `protobuf:"bytes,3,opt,name=realism_config,json=realismConfig" json:"realism_config,omitempty"`
	// Change the vision publish port
	VisionPort           *uint32  `protobuf:"varint,4,opt,name=vision_port,json=visionPort" json:"vision_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimulatorConfig) Reset()         { *m = SimulatorConfig{} }
func (m *SimulatorConfig) String() string { return proto.CompactTextString(m) }
func (*SimulatorConfig) ProtoMessage()    {}
func (*SimulatorConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f358f49a01177a5, []int{4}
}

func (m *SimulatorConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimulatorConfig.Unmarshal(m, b)
}
func (m *SimulatorConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimulatorConfig.Marshal(b, m, deterministic)
}
func (m *SimulatorConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulatorConfig.Merge(m, src)
}
func (m *SimulatorConfig) XXX_Size() int {
	return xxx_messageInfo_SimulatorConfig.Size(m)
}
func (m *SimulatorConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulatorConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SimulatorConfig proto.InternalMessageInfo

func (m *SimulatorConfig) GetGeometry() *SSL_GeometryData {
	if m != nil {
		return m.Geometry
	}
	return nil
}

func (m *SimulatorConfig) GetRobotSpecs() []*RobotSpecs {
	if m != nil {
		return m.RobotSpecs
	}
	return nil
}

func (m *SimulatorConfig) GetRealismConfig() *RealismConfig {
	if m != nil {
		return m.RealismConfig
	}
	return nil
}

func (m *SimulatorConfig) GetVisionPort() uint32 {
	if m != nil && m.VisionPort != nil {
		return *m.VisionPort
	}
	return 0
}

func init() {
	proto.RegisterType((*RobotLimits)(nil), "RobotLimits")
	proto.RegisterType((*RobotWheelAngles)(nil), "RobotWheelAngles")
	proto.RegisterType((*RobotSpecs)(nil), "RobotSpecs")
	proto.RegisterType((*RealismConfig)(nil), "RealismConfig")
	proto.RegisterType((*SimulatorConfig)(nil), "SimulatorConfig")
}

func init() {
	proto.RegisterFile("ssl_simulation_config.proto", fileDescriptor_2f358f49a01177a5)
}

var fileDescriptor_2f358f49a01177a5 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x86, 0x65, 0xcf, 0x73, 0x8e, 0x62, 0x27, 0x51, 0x92, 0x4d, 0x5b, 0x36, 0x24, 0x30, 0xb6,
	0xc1, 0x17, 0xb1, 0x9c, 0x78, 0xcb, 0xfa, 0x03, 0xf4, 0x22, 0x49, 0x81, 0xa2, 0xa8, 0x0b, 0x14,
	0xf2, 0x45, 0x80, 0xde, 0x08, 0x14, 0x4d, 0xcb, 0x84, 0x29, 0x51, 0x20, 0xa9, 0xc4, 0x79, 0x84,
	0xde, 0xf4, 0x75, 0xfa, 0x06, 0x7d, 0xae, 0x82, 0x47, 0x72, 0x2c, 0xf7, 0xaa, 0x77, 0xd2, 0xf7,
	0x73, 0x0e, 0xc9, 0xef, 0x90, 0x70, 0xa2, 0xb5, 0x88, 0x34, 0x4f, 0x0b, 0x41, 0x0c, 0x97, 0x59,
	0x44, 0x65, 0x36, 0xe7, 0x49, 0x90, 0x2b, 0x69, 0xe4, 0xef, 0x87, 0x96, 0x4c, 0x68, 0x44, 0x65,
	0x9a, 0xca, 0xac, 0x02, 0x7f, 0xb3, 0xe0, 0x3d, 0xd7, 0x56, 0x9d, 0x30, 0x99, 0x32, 0xa3, 0x1e,
	0xd7, 0x54, 0x22, 0x65, 0x22, 0xd8, 0x08, 0xff, 0xe2, 0x62, 0x3e, 0x22, 0x59, 0x45, 0xf5, 0xbf,
	0x38, 0xe0, 0x86, 0x32, 0x96, 0x66, 0xc2, 0x53, 0x6e, 0xb4, 0xf7, 0x0c, 0x7c, 0x42, 0x69, 0xa4,
	0x73, 0xc6, 0x66, 0x45, 0x1e, 0x91, 0x58, 0x4b, 0x51, 0x18, 0x16, 0xa5, 0x64, 0xe5, 0x37, 0xce,
	0x1a, 0x03, 0x27, 0x3c, 0x26, 0x94, 0x4e, 0x4b, 0xfa, 0xba, 0x62, 0xdf, 0x93, 0x95, 0x77, 0x05,
	0xbf, 0x6e, 0x19, 0xb3, 0xa4, 0x10, 0x44, 0xa1, 0xcf, 0x41, 0xdf, 0x51, 0xcd, 0x57, 0x92, 0xd6,
	0xf6, 0x2f, 0xfc, 0x62, 0x6d, 0xb1, 0x22, 0x4b, 0xb6, 0xdd, 0xad, 0x89, 0xae, 0x43, 0x42, 0xe9,
	0x8d, 0x25, 0xeb, 0xbd, 0x2e, 0xe1, 0xb8, 0x66, 0xaa, 0x75, 0x6a, 0xa1, 0xc7, 0x7b, 0xf2, 0x6c,
	0xfa, 0x0c, 0x60, 0xff, 0x9e, 0x89, 0xed, 0x0e, 0x3f, 0xa1, 0xba, 0x77, 0xcf, 0x44, 0xbd, 0xf8,
	0x3f, 0xb0, 0x87, 0xca, 0x5a, 0xd9, 0x36, 0x0a, 0xbb, 0x56, 0xf8, 0x54, 0xb1, 0xff, 0xb9, 0x01,
	0xfb, 0x78, 0x72, 0x77, 0x0b, 0x86, 0x84, 0x60, 0xda, 0x3b, 0x05, 0x77, 0xae, 0x64, 0x66, 0x22,
	0xc5, 0x93, 0x85, 0xf1, 0x1b, 0x67, 0xce, 0xc0, 0x09, 0x01, 0xa1, 0xd0, 0x22, 0xde, 0x9f, 0x00,
	0x31, 0xa1, 0xcb, 0x8a, 0x77, 0x90, 0xdf, 0xb1, 0x48, 0x49, 0x9f, 0x00, 0xfe, 0x44, 0x82, 0xcd,
	0x8d, 0xdf, 0x44, 0xb6, 0x63, 0x81, 0x09, 0x9b, 0xa3, 0xb7, 0x2c, 0x8e, 0x6c, 0xab, 0xf4, 0x22,
	0x62, 0xe9, 0xfe, 0xa7, 0x26, 0x00, 0x2e, 0x68, 0x9a, 0x33, 0xaa, 0x3d, 0x1f, 0x1c, 0x3e, 0xc3,
	0x15, 0xb8, 0xe3, 0x4e, 0x80, 0xc4, 0xdb, 0x59, 0xe8, 0xf0, 0x99, 0xf7, 0x07, 0xb4, 0x15, 0x99,
	0xf1, 0x42, 0x97, 0xc9, 0xbc, 0x6c, 0x5d, 0x04, 0x17, 0x2f, 0xc2, 0x0a, 0xb3, 0xec, 0x82, 0xe1,
	0xea, 0x9a, 0x6b, 0xf6, 0xf2, 0x2a, 0xac, 0x30, 0xcf, 0x83, 0x56, 0x4a, 0xb4, 0xae, 0x4e, 0x1a,
	0xbf, 0x6d, 0x1c, 0x29, 0x59, 0x45, 0x82, 0x67, 0x8c, 0xa8, 0x68, 0xc9, 0xe9, 0xb2, 0x1c, 0x03,
	0xff, 0xe7, 0x32, 0x8e, 0x94, 0xac, 0x26, 0xc8, 0xbd, 0xe3, 0x74, 0x89, 0x23, 0xe0, 0x0d, 0xe1,
	0xd0, 0x5a, 0xe8, 0x82, 0xe7, 0x75, 0x43, 0x07, 0x0d, 0xfb, 0x29, 0x59, 0xdd, 0x2e, 0x78, 0xbe,
	0x91, 0xff, 0x0d, 0xbd, 0x99, 0xe2, 0x71, 0x2c, 0x98, 0x8a, 0x1e, 0xf8, 0xcc, 0x2c, 0xfc, 0x9d,
	0x32, 0x92, 0x35, 0x7a, 0x67, 0x41, 0xef, 0x2f, 0x68, 0x0b, 0x1c, 0x63, 0x1f, 0xce, 0x1a, 0x03,
	0x77, 0xbc, 0x1b, 0xd4, 0x46, 0x3b, 0xac, 0x38, 0xef, 0x3f, 0xd8, 0x7d, 0xb0, 0x91, 0xd9, 0x88,
	0x05, 0xd3, 0x7e, 0x17, 0xb5, 0x07, 0xc1, 0xf7, 0x61, 0x86, 0xee, 0x43, 0x2d, 0xd9, 0x73, 0x68,
	0xd3, 0x42, 0x1b, 0x99, 0xfa, 0x3d, 0xd4, 0x1f, 0x05, 0xe5, 0xa5, 0x0a, 0xd6, 0x97, 0x2a, 0xb8,
	0xce, 0x1e, 0xc3, 0x4a, 0xd3, 0x7f, 0x05, 0xdd, 0x90, 0x11, 0xc1, 0x75, 0x7a, 0x8b, 0x17, 0xb7,
	0x66, 0x6f, 0xfc, 0x80, 0xfd, 0x6b, 0x03, 0xf6, 0xa6, 0xe5, 0xe5, 0x97, 0xaa, 0xaa, 0x30, 0x84,
	0xce, 0xfa, 0x5a, 0x57, 0x35, 0x0e, 0x82, 0xe9, 0x74, 0x12, 0xbd, 0xa9, 0xc0, 0xd7, 0xc4, 0x90,
	0xf0, 0x49, 0xe2, 0x9d, 0x83, 0xab, 0xec, 0x86, 0xec, 0xc9, 0x52, 0x9b, 0x74, 0x73, 0xe0, 0x8e,
	0xdd, 0x60, 0x33, 0x20, 0x21, 0xa8, 0xcd, 0xb0, 0x5c, 0x41, 0x4f, 0x95, 0xeb, 0xad, 0x5e, 0x1a,
	0x0c, 0xdf, 0x1d, 0xf7, 0x82, 0xad, 0x6d, 0x84, 0x5d, 0xb5, 0xb5, 0xab, 0x53, 0x70, 0xab, 0x17,
	0x27, 0x97, 0xca, 0xe0, 0x50, 0x74, 0x43, 0x28, 0xa1, 0x0f, 0x52, 0x99, 0x9b, 0xe7, 0x1f, 0xff,
	0x4f, 0xb8, 0x59, 0x14, 0x71, 0x40, 0x65, 0x3a, 0xb2, 0xcd, 0x6f, 0x8b, 0x7c, 0x38, 0x9d, 0x4e,
	0x46, 0x5a, 0x8b, 0xe1, 0xe6, 0x7d, 0x1b, 0xe2, 0x31, 0x50, 0x29, 0x46, 0xf9, 0x32, 0x19, 0x69,
	0x9e, 0x7e, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x99, 0x86, 0x0f, 0x00, 0x01, 0x05, 0x00, 0x00,
}
