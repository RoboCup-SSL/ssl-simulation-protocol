// Note: All unset variables are unmodified when receiving the command.

import "ssl_gc_common.proto";
import "ssl_geometry.proto";

// Teleport the ball to a new location and optionally set it to some velocity
message SimulatorTeleportBall {
    // x-coordinate [m]
    optional float x = 1;
    // y-coordinate [m]
    optional float y = 2;
    // z-coordinate (height) [m]
    optional float z = 3;
    // Velocity in x-direction [m/s]
    optional float vx = 4;
    // Velocity in y-direction [m/s]
    optional float vy = 5;
    // Velocity in z-direction [m/s]
    optional float vz = 6;
    // Teleport the ball safely to the target, for example by
    // moving robots out of the way in case of collision and set speed of robots close-by to zero
    optional bool teleport_safely = 7 [default = false];
}

// Teleport a robot to some location and give it a velocity
message SimulatorTeleportRobot {
    // Robot id to teleport
    required RobotId id = 1;
    // x-coordinate [m]
    optional float x = 2;
    // y-coordinate [m]
    optional float y = 3;
    // Orientation [rad], measured from the x-axis counter-clockwise
    optional float orientation = 4;
    // Global velocity [m/s] towards x-axis
    optional float v_x = 5;
    // Global velocity [m/s] towards y-axis
    optional float v_y = 6;
    // Angular velocity [rad/s]
    optional float v_angular = 7;
}

// Full command for a single robot
message RobotCommand {
    // Id of the robot
    required RobotId id = 1;
    // Movement command
    optional RobotMoveCommand move_command = 2;
    // Absolute (3 dimensional) kick speed [m/s]
    optional float kick_speed = 3;
    // Kick angle [degree] (defaults to 45 degrees)
    optional float kick_angle = 4 [default = 45];
    // Dribbler speed in rounds per minute [rpm]
    optional float dribbler_speed = 5;
}

// Wrapper for different kinds of movement commands
message RobotMoveCommand {
    oneof command {
        // Move with wheel velocities
        MoveWheelVelocity wheel_velocity = 1;
        // Move with local velocity
        MoveLocalVelocity local_velocity = 2;
        // Move with global velocity
        MoveGlobalVelocity global_velocity = 3;
    }
}

// Move robot with wheel velocities
message MoveWheelVelocity {
    // Velocity [m/s] of front right wheel
    required float front_right = 1;
    // Velocity [m/s] of back right wheel
    required float back_right = 2;
    // Velocity [m/s] of back left wheel
    required float back_left = 3;
    // Velocity [m/s] of front left wheel
    required float front_left = 4;
}

// Move robot with local velocity
message MoveLocalVelocity {
    // Velocity forward [m/s] (towards the dribbler)
    required float forward = 1;
    // Velocity to the left [m/s]
    required float left = 2;
    // Angular velocity counter-clockwise [rad/s]
    required float angular = 3;
}

// Move robot with global velocity
message MoveGlobalVelocity {
    // Velocity on x-axis of the field [m/s]
    required float vel_x = 1;
    // Velocity on y-axis of the field [m/s]
    required float vel_y = 2;
    // Angular velocity counter-clockwise [rad/s]
    required float vel_angular = 3;
}

// Feedback from a robot
message RobotFeedback {
    // Id of the robot
    required RobotId id = 1;
    // Has the dribbler contact to the ball right now
    optional bool dribbler_ball_contact = 2;
}

// Movement limits for a robot
message RobotLimits {
    // Max absolute speed-up acceleration [m/s^2]
    optional float acc_speedup_absolute_max = 1;
    // Max angular speed-up acceleration [m/s^2]
    optional float acc_speedup_angular_max = 2;
    // Max absolute brake acceleration [m/s^2]
    optional float acc_brake_absolute_max = 3;
    // Max angular brake acceleration [m/s^2]
    optional float acc_brake_angular_max = 4;
    // Max absolute velocity [m/s]
    optional float vel_absolute_max = 5;
    // Max angular velocity [rad/s]
    optional float vel_angular_max = 6;
}

// Robot wheel angle configuration
// all angles are relative to looking forward,
// all wheels / angles are clockwise
message RobotWheelAngles {
    // Angle front right [rad]
    required float front_right = 1;
    // Angle back right [rad]
    required float back_right = 2;
    // Angle back left [rad]
    required float back_left = 3;
    // Angle front left [rad]
    required float front_left = 4;
}

// Specs of a robot
message RobotSpecs {
    // Id of the robot
    required RobotId id = 1;
    // Robot radius [m]
    optional float radius = 2 [default = 0.09];
    // Robot height [m]
    optional float height = 3 [default = 0.15];
    // Robot mass [g]
    optional float mass = 4;
    // Max linear kick speed [m/s] (unset = unlimited)
    optional float max_linear_kick_speed = 7;
    // Max chip kick speed [m/s] (unset = unlimited)
    optional float max_chip_kick_speed = 8;
    // Width of the dribbler [m] (implicitly defines the distance from robot center to dribbler and opening angle)
    optional float dribbler_width = 9;
    // Movement limits
    optional RobotLimits limits = 10;
    // TODO
    optional float shoot_radius = 11;
    // TODO how should this effect the simulation?
    optional float dribbler_height = 12;
    // Wheel angle configuration
    optional RobotWheelAngles wheel_angles = 13;
}

// Realism configuration for ER-Force simulator
// TODO documentation
message SimulatorRealismConfigErForce {
    optional float stddev_ball_p = 1;
    optional float stddev_robot_p = 2;
    optional float stddev_robot_phi = 3;
    optional float stddev_ball_area = 4;
    optional bool enable_invisible_ball = 5;
    optional float ball_visibility_threshold = 6;
    optional float camera_overlap = 7;
    optional float dribbler_ball_detections = 8;
    optional float camera_position_error = 9;
    optional float robot_command_loss = 10;
    optional float robot_response_loss = 11;
    optional float missing_ball_detections = 12;
    optional int64 vision_delay = 13;
    optional int64 vision_processing_time = 14;
    // if false, 'glue' the ball during dribbling
    optional bool simulate_dribbling = 15;
}

// Wrapper for different types of realism configurations
message SimulatorRealismConfig {
    oneof config {
        // Realism configuration for ER-Force simulator
        SimulatorRealismConfigErForce erforce = 1;
    }
}

// Control the simulation
message SimulatorControl {
    // Teleport the ball
    optional SimulatorTeleportBall teleport_ball = 1;
    // Teleport robots
    repeated SimulatorTeleportRobot teleport_robot = 2;
    // Change the simulation speed
    optional float simulation_speed = 3;
}

// Change the simulator configuration
message SimulatorConfig {
    // Update the geometry
    optional SSL_GeometryData geometry = 1;
    // Update the robot specs
    repeated RobotSpecs robot_specs = 2;
    // Update realism configuration
    optional SimulatorRealismConfig realism_config = 3;
}

// Capabilities of the simulator implementation
enum SimulatorCapability {
    // Unknown or not set (for compatibility)
    SIMULATOR_CAPABILITY_UNKNOWN = 1;
    // Supports moving robots with wheel velocity
    SIMULATOR_CAPABILITY_MOVE_WHEEL_VELOCITY = 2;
    // Supports moving robots with local velocity
    SIMULATOR_CAPABILITY_MOVE_LOCAL_VELOCITY = 3;
    // Supports moving robots with global velocity
    SIMULATOR_CAPABILITY_MOVE_GLOBAL_VELOCITY = 4;
}

// Errors in the simulator
message SimulatorError {
    // Unique code of the error for automatic handling on client side
    optional string code = 1;
    // Unsupported capability for automatic handling on client side
    optional SimulatorCapability unsupported_capability = 2;
    // Human readable description of the error
    optional string message = 3;
}

// Command from the connected client to the simulator
message SimulatorCommand {
    // Control the robots
    repeated RobotCommand robot_commands = 1;
    // Control the simulation
    optional SimulatorControl control = 2;
    // Configure the simulation
    optional SimulatorConfig config = 3;
}

// Response of the simulator to the connected client
message SimulatorResponse {
    // Feedback of the robots
    repeated RobotFeedback feedback = 1;
    // List of errors, like using unsupported features
    repeated SimulatorError errors = 2;
}
